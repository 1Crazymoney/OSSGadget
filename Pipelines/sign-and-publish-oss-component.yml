parameters:
  project: string

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
  - script: 'dotnet tool install -g nbgv'
    displayName: 'Install GitVersioning'
  - task: PowerShell@2
    displayName: Set Release Version
    inputs:
      targetType: 'inline'
      script: |
        $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
        Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$version"
  - task: DownloadBuildArtifacts@0
    displayName: Retrieve Linux & Mac Archives
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: 'Unsigned_Nix/*.zip'
      downloadPath: '$(Build.BinariesDirectory)'
  - task: DownloadBuildArtifacts@0
    displayName: Retrieve Windows, NetCoreApp, Nupkg Archives
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: 'Unsigned_WinNuget/*.zip'
      downloadPath: '$(Build.BinariesDirectory)'
  - task: ExtractFiles@1
    displayName: Extract Artifacts for Signing
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)\*.zip'
      destinationFolder: '$(Build.BinariesDirectory)'
      cleanDestinationFolder: false
  - task: AntiMalware@3
    displayName: Anti-Malware Scan
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.BinariesDirectory)'
      EnableServices: true
      SupportLogOnError: true
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Warning'
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.1.804'
  - task: EsrpCodeSigning@1
    displayName: Code Sign Linux
    inputs:
      ConnectedServiceName: 'OSSGadget_CodeSign'
      FolderPath: '$(Build.BinariesDirectory)/${{ parameters.project }}-linux-x64_$(ReleaseVersion)'
      Pattern: 'oss-characteristic.dll, oss-defog.dll, oss-detect-backdoor.dll, oss-download.dll, oss-find-source.dll, oss-health.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - task: EsrpCodeSigning@1
    displayName: Code Sign MacOS
    inputs:
      ConnectedServiceName: 'OSSGadget_CodeSign'
      FolderPath: '$(Build.BinariesDirectory)/${{ parameters.project }}-osx-x64_$(ReleaseVersion)'
      Pattern: 'oss-characteristic.dll, oss-defog.dll, oss-detect-backdoor.dll, oss-download.dll, oss-find-source.dll, oss-health.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - task: EsrpCodeSigning@1
    displayName: Code Sign Windows
    inputs:
      ConnectedServiceName: 'OSSGadget_CodeSign'
      FolderPath: '$(Build.BinariesDirectory)\${{ parameters.project }}-win-x64_$(ReleaseVersion)'
      Pattern: 'oss-characteristic.exe, oss-characteristic.dll, oss-defog.exe, oss-defog.dll, oss-detect-backdoor.exe, oss-detect-backdoor.dll, oss-download.exe, oss-download.dll, oss-find-source.exe, oss-find-source.dll, oss-health.exe, oss-health.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - task: EsrpCodeSigning@1
    displayName: Code Sign .NET Core App
    inputs:
      ConnectedServiceName: 'OSSGadget_CodeSign'
      FolderPath: '$(Build.BinariesDirectory)\${{ parameters.project }}-netcoreapp_$(ReleaseVersion)'
      Pattern: 'oss-characteristic.exe, oss-characteristic.dll, oss-defog.exe, oss-defog.dll, oss-detect-backdoor.exe, oss-detect-backdoor.dll, oss-download.exe, oss-download.dll, oss-find-source.exe, oss-find-source.dll, oss-health.exe, oss-health.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
    displayName: 'Delete Code Sign Summaries'
  - task: ArchiveFiles@2
    displayName: Archive Artifact - Linux
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/${{ parameters.project }}-linux-x64_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/${{ parameters.project }}-linux-x64_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - MacOS
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/${{ parameters.project }}-osx-x64_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/${{ parameters.project }}-osx-x64_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - Windows
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/${{ parameters.project }}-win-x64_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/${{ parameters.project }}-win-x64_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - .NET Core App
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/${{ parameters.project }}-netcoreapp_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/${{ parameters.project }}-netcoreapp_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: PublishPipelineArtifact@1
    displayName: Publish Signed Artifacts to Pipeline
    inputs:
      targetPath: '$(Build.StagingDirectory)'
      artifact: 'Signed_Binaries'
  - task: GitHubRelease@1
    displayName: Release to GitHub
    inputs:
      gitHubConnection: 'OSSGadget'
      repositoryName: 'microsoft/OSSGadget'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: 'v$(ReleaseVersion)'
      title: 'Release v$(ReleaseVersion) - OSS Gadget'
      assets: |
        $(Build.StagingDirectory)/*.zip
      changeLogCompareToRelease: 'lastNonDraftRelease'
      changeLogType: 'commitBased'
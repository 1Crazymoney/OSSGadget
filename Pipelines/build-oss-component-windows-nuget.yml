parameters:
  project: string

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
  - script: 'dotnet tool install -g nbgv'
    displayName: 'Install GitVersioning'
  - task: PowerShell@2
    displayName: Set Release Version
    inputs:
      targetType: 'inline'
      script: |
        $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
        Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$version"
  - task: DotNetCoreCLI@2
    displayName: ${{ parameters.project }} - Dotnet Publish Windows x64
    inputs:
      command: 'publish'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)\${{ parameters.project }}-win-x64_$(ReleaseVersion) -r win-x64'
      publishWebProjects: false
      zipAfterPublish: false
      workingDirectory: $(SolutionDirectory)/${{ parameters.project }}
  - task: DotNetCoreCLI@2
    displayName: ${{ parameters.project }} - Dotnet Build .NET Core App
    inputs:
      command: 'build'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)\${{ parameters.project }}-netcoreapp_$(ReleaseVersion)'
      publishWebProjects: false
      zipAfterPublish: false
      workingDirectory: $(SolutionDirectory)/${{ parameters.project }}
  - task: AntiMalware@3
    displayName: Anti-Malware Scan
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.BinariesDirectory)'
      EnableServices: true
      SupportLogOnError: false
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Warning'
  - task: ArchiveFiles@2
    displayName: Archive Artifact - Windows x64
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\${{ parameters.project }}-win-x64_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)\${{ parameters.project }}-win-x64_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - .NET Core App
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\${{ parameters.project }}-netcoreapp_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)\${{ parameters.project }}-netcoreapp_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: PublishBuildArtifacts@1
    displayName: Store Windows, NetCoreApp, Nupkg Archives
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)'
      ArtifactName: 'Unsigned_WinNuget'
      publishLocation: 'Container'

